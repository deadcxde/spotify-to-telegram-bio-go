package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"spotify-tg-bio/config"
	spotifyclient "spotify-tg-bio/spotify"
	telegramclient "spotify-tg-bio/telegram"
)

func main() {
	log.Println("Starting Spotify to Telegram Bio translator...")

	config, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram
	log.Println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
	telegramClient := initTelegramClient(config)
	if telegramClient == nil {
		log.Fatal("Failed to initialize Telegram client")
	}
	log.Println("Telegram –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	defer func() {
		if err := telegramClient.Close(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
		}
	}()

	// –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Spotify
	log.Println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Spotify –∫–ª–∏–µ–Ω—Ç–∞...")
	spotifyClient := initSpotifyClient(config)
	if spotifyClient == nil {
		log.Fatal("Failed to initialize Spotify client")
	}
	log.Println("Spotify –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
	go func() {
		sig := <-sigChan
		log.Printf("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: %v\n", sig)
		log.Println("–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é...")

		if err := telegramClient.RestoreOriginalBio(context.Background()); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏: %v\n", err)
		} else {
			log.Println("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
		}

		cancel()
	}()

	log.Printf("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è: %q\n", telegramClient.GetOriginalBio())
	log.Println("–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")

	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
	for {
		select {
		case <-ctx.Done():
			log.Println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
			return
		default:
			currentTrack := getCurrentTrack(spotifyClient)
			if err := updateTelegramBio(telegramClient, currentTrack); err != nil {
				log.Printf("Failed to update Telegram bio: %v", err)
			} else {
				log.Printf("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: %s", currentTrack)
			}
			time.Sleep(time.Duration(config.UpdateInterval) * time.Second)
		}
	}
}

func getCurrentTrack(client *spotifyclient.Client) string {
	ctx := context.Background()
	playing, err := client.GetCurrentlyPlaying(ctx)
	if err != nil {
		log.Printf("Error getting current track: %v", err)
		return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"
	}

	if playing == nil || !playing.Playing {
		log.Printf("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç")
		return "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç"
	}

	track := playing.Item
	log.Printf("–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫: %s - %s", track.Name, track.Artists[0].Name)
	return "üéµ " + track.Name + " - " + track.Artists[0].Name
}

func updateTelegramBio(client *telegramclient.Client, status string) error {
	ctx := context.Background()
	return client.UpdateBio(ctx, status)
}

func initSpotifyClient(config *config.Config) *spotifyclient.Client {
	client, err := spotifyclient.NewClient(config.SpotifyClientID, config.SpotifyClientSecret)
	if err != nil {
		log.Printf("Failed to create Spotify client: %v", err)
		return nil
	}

	if err := client.Authenticate(); err != nil {
		log.Printf("Failed to authenticate Spotify client: %v", err)
		return nil
	}

	return client
}

func initTelegramClient(config *config.Config) *telegramclient.Client {
	ctx := context.Background()
	client, err := telegramclient.NewClient(
		config.TelegramAPIID,
		config.TelegramAPIHash,
		config.TelegramPhoneNumber,
	)
	if err != nil {
		log.Printf("Failed to create Telegram client: %v", err)
		return nil
	}

	log.Println("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram...")
	if err := client.Authenticate(ctx); err != nil {
		log.Printf("Failed to authenticate Telegram client: %v", err)
		return nil
	}
	log.Println("Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

	return client
}
